"""
Problem: 23. Merge k Sorted Lists 
Level: Hard
Tags: 
Technique:
Status: 

Problem Description:  
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity

Lesson: 
"""
import math

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """





#
#           test code for terminal runs
#
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def addNode_head(node_h, val):
        """
        adds node to head
        :type node_h: ListNode (original head)
        :type val: ListNode (new head)
        :rtype     : ListNode
        :method calls: NONE
        """
        nn = ListNode(val)
        nn.next = node_h
        return nn

if __name__== "__main__":
    """
    test code 
    """ 

    def print_test(ans_e,ans_o,name):
        """
        prints tests in standardized format
        :type ans_e: expected answer in printable format
        :type ans_o: observed answer in printable format
        """
        print('~'*40)
        if ans_o != ans_e:
            error = 1
            print("########## FAIL ##########")
            print("TEST: {} :: Status: FAIL".format(name))
        else:
            error = 0
            print("TEST: {} :: Status: PASS".format(name))
        print('TEST: {} :: Expected: {}'.format(method, ans_e))
        print('TEST: {} :: Observed: {}'.format(method, ans_o))
        return error


    err  = 0
    sol  = Solution()
    # test 0
    method = 'K too large'
    l1 = [1,3,5]
    l2 = [2,4,6]
    lists = [l1,l2]
    input = []
    for l in lists:
        head0 = ListNode(None)
        head  = head0
        for v in l:
            head.next = ListNode(v)
            head = head.next
        head = head0.next
        input.append(head)
        del head, head0
    print(input)
    expected_answer = [1,2,3,4,5,6]
    output = sol.reverseKGroup(head, K)
    observed_answer = []
    while output != None:
        observed_answer.append(output.val)
        output = output.next
    err = err + print_test(expected_answer, observed_answer,method)

    # test 1
    method = 'reverse k = 2 perfect multiple'
    vals = [1,2,3,4]
    K    = 2
    head0 = ListNode(None)
    head  = head0
    for v in vals:
        head.next = ListNode(v)
        head = head.next
    head = head0.next
    expected_answer = [2,1,4,3]
    output = sol.reverseKGroup(head, K)
    observed_answer = []
    while output != None:
        observed_answer.append(output.val)
        output = output.next
    err = err + print_test(expected_answer, observed_answer,method)

    # test 2
    method = 'reverse k = 2 with remainder'
    vals = [1,2,3,4,5]
    K    = 2
    head0 = ListNode(None)
    head  = head0
    for v in vals:
        head.next = ListNode(v)
        head = head.next
    head = head0.next
    expected_answer = [2,1,4,3,5]
    output = sol.reverseKGroup(head, K)
    observed_answer = []
    while output != None:
        observed_answer.append(output.val)
        output = output.next
    err = err + print_test(expected_answer, observed_answer,method)


    # Final pass/fail readout
    print('')
    if err == 0:
        print('PASSED ALL TESTS')
    else:
        print('FAILED A TEST: DEBUG!!!')
    
