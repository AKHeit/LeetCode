All code is manually subversioned (v0_0, v0_1, ... v1_0, v1_1 etc.)
final.py is what is finally submitted to LeetCode

Contents:
- Tracking
- Notes
- Description

http://cslibrary.stanford.edu/

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#             Tracking 
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To Do:
Clean up understanding of how python structures are passed through methods
92 Reverse Linked List 2 (Medium)
23 Merge k sorted lists (Hard)
linked lists, stacks/queues, hashes, heaps and trees


Interesting Problems:
Basic Pointer Manipulation 206; 21; 141; 19M; 25H (the best test)

Problems: Linked Lists
25 Reverse Nodes in k-Group (Hard)
Medium:
19  Remove Nth Node from end of list  
82 Remove Duplicates from Sorted List 2
Easy:
21  Merge Sorted Lists
141 Linked Lists 
206 Reverse Linked List
234 Palindrome Linked List
561 Array Partition
566 Reshape Matrix
617 MergeTwoBinaryTrees
728 SelfDividingNums

Space Complexity:
Space complexity is a measure of the amount of working storage an algorithm needs. That means how much memory, in the worst case, is needed at any point in the algorithm. As with time complexity, we're mostly concerned with how the space needs grow, in big-Oh terms, as the size N of the input problem grows.




#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#             Notes 
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Contents:
- Python
- Alg General
- Alg Linked Lists

#
#             Python
# 

Python: Dictionary Implementation
- Python currenly uses a Hash Table
- A red-black tree (alternative) can always perform a lookup in O(log N). 
- A hashtable can perform a lookup in O(1) time although that can degrade to O(N) depending on the input.

Python general notes:
- instances of user-defined objects are always hashable


#
#             Alg General
# 
Red-Black tree has O(logN) lookup
Hash Table best O(1), worst O(N)




#
#             Alg Linked Lists
# 

Def of classic Linked List:
- single head pointer points to the first node of list. 
- each node contains a single .next pointer to the next node. 
- .next pointer of the last node is NULL. 
- empty list is represented by a NULL head pointer
- all of the nodes are allocated in the heap

Classic utility functions:
- get the length of the list
- read off a node
- insert node to the head of a list

Dynamic alternative to arrays:
- pro: no need to preallocate size and memory  
- pro: can dynamically grow 
- pro: easy to shift elements
- con: elements accesed by chain of next
- con: linear search (O(n)) rather than O(1) for arrays

Pointers: review
- C/C++ initiates all pointers with bad values (not NULL)
- always initiate a pointer as NULL (JAVA) to force crash
- "dereference" operation accesses the "pointee" of a pointer
- p=q doesn't copy the data, just assigns pointers to same pointee
- C/C++ malloc() and free() assign blocks of memory in the heap


Python node/linked list implementation (basic):
"""
class Node(object):
    def __init__(self, data=None, next_node=None):
        self.data = data
        self.next_node = next_node

    def get_data(self):
        return self.data

    def get_next(self):
        return self.next_node

    def set_next(self, new_next):
        self.next_node = new_next

class LinkedList:
   def __init__(self,head = None):
       """
       defines a head node
       """
       self.head = head

   def getSize(self):
        
       return self.size

   def addNode(self,data):
       """
       inserts node in beginning of list
       """
       newNode = Node(data,self.head)
       self.head = newNode
       return True
       
   def printNode(self):
       curr = self.head
       while curr:
           print(curr.data)
           curr = curr.getNextNode()
"""











#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#             Full Description
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Problem: 561 Array Partition
Level: Very Easy
Tag: array, math, basic
Technique: brute force
Takeaways: 

Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 566 Reshape Matrix
Level: Easy
Tags: Basic, Math
Technique: simple
Takeaways: 

In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data. You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively. The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were. If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 617_MergeTwoBinaryTrees
Level: Easy
Tags: basic, binary tree
Technique: recursive
Takeaway:

Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 728_SelfDividingNums
Level: Easy
Tags: basic, math, 
Technique: brute force

A self-dividing number is a number that is divisible by every digit it contains. For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0. Also, a self-dividing number is not allowed to contain the digit zero. Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 206 reverse linked list
Level: easy 
Tags: linked list
Technique: iterative, recursion
Status: Accepted

Problem Description:
reverse a linked list

Takeaways:
can save space by modifying list rather than build new list
modify list both iteratively and recursively

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 21 Merge Two Sorted Lists
Level: easy
Tags: linked lists, merge, pointers
Technique: brute force, iterative, recursive
Status: Accepted

Problem Description:
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Lesson:
- unchanging dummy node to start
- drop off dummy for final answer

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 141 Linked List Cycle
Level: Easy (35%)
Tags: hash table, keys
Technique: double pointers, brute force, hash table
Status: Accepted

Problem Description:
Given a singly linked list, determine if it has a cycle in it. Try to solve in O(n).

Lesson:
- Speed element matching in list from O(n2) to O(n) by using hash table.
- Instances of user defined classes are hashable

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 234 Palindrome Linked List
Level: Easy 
Tags: 
Technique: pointer manipulation; copying and deep copying 
Status: Accepted

Problem Description:  
Given a singly linked list, determine if it is a palindrome 
Could you do it in O(n) time and O(1) space

Lesson:
copy.deepcopy has a recursive limit
be creative about saving space

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Problem: 19 Remove Nth Node from end of list 
Level: Medium 
Tags: 
Technique: 
Status: Accepted

Problem Description:  
Given a linked list, remove the nth node from the end of list and return its head.
For example,
   Given linked list: 1->2->3->4->5, and n = 2.
   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass. 

Lesson:
Need to be creative to get around O(1) constraint
Additional explicit looping is easier then clever looping

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 82 Remove Duplicates from Sorted List 2
Level: Medium
Tags: 
Technique: 3 Pointers
Status: Accepted

Problem Description:  
 Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3. 

Lesson: 
For while condition loops, make sure condition is evaluatable

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Problem: 25 Reverse Nodes in k-Group
Level: Hard
Tags: 
Technique:Pointer Manipulation, 3 Pointers
Status: Accepted

Problem Description:  
 Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
You may not alter the values in the nodes, only nodes itself may be changed.
Only constant memory is allowed.

Must be Space O(1)
Given this linked list: 1->2->3->4->5
For k = 2, you should return: 2->1->4->3->5
For k = 3, you should return: 3->2->1->4->5 

Lesson: 
use head/tail pointer notation to keep straight
use dummy nodes to maintain the head

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

